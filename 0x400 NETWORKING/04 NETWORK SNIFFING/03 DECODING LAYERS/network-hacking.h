/* This function accepts two args one Socket FD and
 * the pointer to null terminated string to send
 * It ensures all bytes are sent and returns 1 if successful
 * else returns 0
 */

int send_string( int sockfd, unsigned char *buffer )
{
    int sent_bytes, bytes_to_send;

    bytes_to_send = strlen(buffer);

    while ( bytes_to_send > 0 )
    {
        sent_bytes = send( sockfd, buffer, bytes_to_send, 0 );    // Sending the bytes
        if ( sent_bytes == -1 )                                   // Error in sending
            return 0;                                             // Return error
        bytes_to_send -= sent_bytes;                              // to send remaining bytes
        buffer += sent_bytes;                                     // decrease buffer to next send
    }

    return 1;                                                     // return success
}

/* This functions accepts Socket FD and destination buffer
 * to write the data. It reads EOL bytes but terminates before that.
 * It returns the length of the readline excluding the
 * EOL characters
 */

int recv_line( int sockfd, unsigned char *dest_buffer )
{
    #define EOL "\r\n"      //End-Of-Line bytes and their size
    #define EOL_SIZE 2

    unsigned char *ptr;
    int eol_match = 0;

    ptr = dest_buffer;

    while ( (recv( sockfd, ptr, 1, 0 )) == 1 )         // Read a Single byte
    {
        if ( *ptr == EOL[eol_match] )                 // Does current byte match EOL bytes
        {
            eol_match++;
            if ( eol_match == EOL_SIZE )              // If all bytes match terminator
            {
                *( ptr+1-EOL_SIZE ) = '\0';           // Terminate the string
                return strlen(dest_buffer);           // Return the length of the string
            }
        }
        else
        {
            eol_match = 0;
        }

        ptr++;                                       // Increment to next byte
    }

    return 0;                                       // Return terminator not found
}

/*
 * A custom made structure for
 * ETHERNET HEADER
 * For detailed documentation in linux see
 * /usr/include/linux/if_ethernet.h
 */

#define ETHER_ADDR_LEN 6
#define ETHER_HDR_LEN 14

struct ether_hdr
{
    u_char  ether_dest_addr[ETHER_ADDR_LEN];
    u_char  ether_src_addr[ETHER_ADDR_LEN];
    u_short ether_type;
};

/*
 * A custom made structure for
 * IP HEADER
 * For detailed documentation in linux see
 * /usr/include/netinet/ip.h
 */
struct ip_hdr
{
    u_char  ip_version_and_header_length;
    u_char  ip_tos;
    u_short ip_length;
    u_short ip_id;
    u_short ip_frag_offset;
    u_char  ip_ttl;
    u_char  ip_type;
    u_short ip_checksum;
    u_int   ip_src_addr;
    u_int   ip_dest_addr;
};

/*
 * A custom made structure for
 * TCP HEADER
 * For detailed documentation in linux see
 * /usr/include/netinet/tcp.h
 */
struct tcp_hdr
{
    u_short tcp_src_port;
    u_short tcp_dest_port;
    u_int   tcp_seq;
    u_int   tcp_ack;
    u_char  reserved:4;
    u_char  tcp_offset:4;
    u_char  tcp_flags;

    #define TCP_FIN  0x01
    #define TCP_SYN  0x02
    #define TCP_RST  0x04
    #define TCP_PUSH 0x08
    #define TCP_ACK  0x10
    #define TCP_URG  0x20

    u_short tcp_window;
    u_short tcp_checksum;
    u_short tcp_urgent;
};
