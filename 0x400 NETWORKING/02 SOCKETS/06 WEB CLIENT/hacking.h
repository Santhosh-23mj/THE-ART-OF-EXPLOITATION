//Function to print fatal error messages
void prnerr( char *message )
{
    char error[100];

    strcpy(error,"[!!] Fatal Error ");
    strncat(error,message,83);
    perror(error);
    exit(-1);
}

//Error Checked Malloc function
void *ec_malloc( unsigned int size )
{
    void *ptr;

    ptr = malloc(size);

    if ( ptr == NULL )
        prnerr("in malloc() while memory allocation");
    return ptr;
}


// Function to print raw bytes in hex and printable characters in split
void dump ( const unsigned char *data_buffer, const unsigned int length )
{
   unsigned char byte;
   unsigned int i,j;

   for ( i = 0; i < length; i++ )
   {
       byte = data_buffer[i];
       printf("%02x ",data_buffer[i]);                       //Data in hex

       if ( ( ( i % 16 ) == 15 ) ||  ( i == (length - 1) )  )
       {
           for ( j = 0; j < (15-i) % 16; j++ )
               printf("  ");
           printf("| ");
           for ( j = ( i - ( i % 16 )); j <= i; j++ )
           {
               byte = data_buffer[j];
               if (( byte > 31 ) && ( byte < 127 ))        // In printable range
                   printf("%c",byte);
               else
                   printf(".");                             // outside printable range
           }

           printf("\n");                                    // Each line is 16 bytes
       } // End if
   }  // End for
}